//============================================================================
//                          SORGULAR ( QUERIES) https://docs.mongodb.com/manual/reference/operator/query-comparison/  adresine bakılabilir
///-----------------------------------------------------------------
//
//// 1) "urunler" adinda bir veritabani ve icerisinde "fiyatlar" 
//// adinda bir collection tanimlayalim.  
////------------------------------------------------

use("URUNLER")
db.createCollection("fiyatlar")

// 2) aşagıdaki dökümanları collection a kaydedip listeleyelim
db.fiyatlar.insertMany([
{"urunAdi":"TV", "fiyat": 5000, "vergi": 10 ,"summary":[{"version":1},{"show":"yok"}]},
{"urunAdi":"Telefon", "fiyat": 3500, "vergi": 20 },
{"urunAdi":"Utu", "fiyat": 1500, "vergi": 5 },
{"urunAdi":"Buzdolabi", "fiyat": 4000, "vergi": 10 } ] ); 
use("URUNLER")

db.fiyatlar.find();

//3) ilk 2 dökümanı sorgula

use("URUNLER")

db.fiyatlar.find().limit(2);

//4) sadece 2. ve 3. dökümanı sorgula

use("URUNLER")

db.fiyatlar.find().skip(1).limit(2);

//5) birinci dökümanı sorgula

use("URUNLER")

//db.fiyatlar.find().limit(1);

db.fiyatlar.findOne();

///=================================================================
////       LOGICAL QUERY OPERATOR (mantıksal sorgu) ($and ,$or, $not,$nor)
////
//// SYNTAX: { $and: [ {ifade1}, {ifade2} , ... , {ifadeN} ] }  
////         { field: { $not: { <operator-ifade> } } }  ==> ( {"vergi": {$not: {$eq:10}}});
////=================================================================
// {   $or: [  { "fiyat": 5 }, { "adı":" utu "} ]     }
// {"fiyat": {$not:       {$eq:10} }  }
////-----------------------------------------------------------------
//// 5) Collection asagidaki dokumani ekleyelim.    
// ////-----------------------------------------------------------------

use("URUNLER")
db.fiyatlar.insertOne({"urunAdi":"Koltuk", "fiyat": 5000, "vergi": 10});

//6) fiyat=5000 olan VE urunAdı= TV olan dokümanları listele

use("URUNLER")
db.fiyatlar.find(              { $and:      [   {fiyat:5000 },   { urunAdi:"TV" }   ]   }     );

//7) urunAdı=Utu olan veya vergi =10 olan dokumani do

use("URUNLER")
db.fiyatlar.find(       {$or : [           {  urunAdi:"Utu" }  ,   {vergi:10 }       ]     }  )

//8) fiyat = 5000 olan urunleri listeleyelim

use("URUNLER")

//db.fiyatlar.find(          {   fiyat:5000 }   )

db.fiyatlar.find(      {  fiyat: {     $eq:5000  }  }    )

// 9)  vergi=10 olmayan dokümanları

use("URUNLER")
db.fiyatlar.find(    { vergi:  {$not: {$eq :10 }      }         }       )

//10) ( urunAdı=TV ve vergi=10   ) olmayan dokumanlar

use("URUNLER")
db.fiyatlar.find(   {$nor :   [  {urunAdı:"TV " },   {vergi:10 }     ]   }             )

////-----------------------------------------------------------------
//// 11) urunAdi=TV olan kayitlarin sadece fiyat'ini listeleyiniz.
////     (Bu isleme Projection denilmektedir)
//// Projection'da gosterilmek istenen Field'a 1 degeri atanir Ornegin: 
//// {"fiyat":1}, gosterilmek istenmeyenler ise yazilmaz. 
//// Sadece _id icin bir istisna vardir.  onu istemiyorsak 0 ile belirticez
////
// //// SYNTAX   db.collection.find( {query}, {projection}). aynı kişinin fiyatını id sini istediği için aynı parantez, süslünün biri filtreleme şartları  için, biri göstermek istediğimiz field lar için
////-----------------------------------------------------------------

use("URUNLER")
db.fiyatlar.find(   { urunAdi:"TV"} , {   fiyat:1 , _id:0 } 
             )

// 12) tum dokumanların sadece fiyat ve urunadını listeleyelim

use("URUNLER")
db.fiyatlar.find(     {   },     {  fiyat:1,    urunAdi:1  , _id:0  }      )

////=================================================================
////                    COMPARAISON (karşılaştırma) OPERATOR 
//// $eq : esit mi
//// $lt : kücük mü  (less than)
//// $gt : buyuk mu (greater than)
//// $lte: kucuk esit mi
//// $gte: buyuk esit mi
//// $ne : esit degil mi
//// $in : belirtilen degerler, bir dizideki degerlerden birisine esit mi
//// $nin: belirtilen degerler, bir dizideki tum degerlere esit degil mi
//// SYNTAX :   {field: {$gte: value} }
////=================================================================























